- hosts: localhost
  become: yes
  gather_facts: false
  vars_files:
    - var.yml

  tasks:

    # VPC creation
    - name: Create VPC
      ec2_vpc_net:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        cidr_block: "{{ vpc_cidr_block }}"
        name: "{{ vpc_name }}"
        region: "{{ region }}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: present
      register: vpc_result

    # IGW creation
    - name: Create Internet Gateway
      ec2_vpc_igw:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ igw_name }}"
      register: igw_result

    # Public-subnet creation
    - name: Create VPC Public Subnet
      ec2_vpc_subnet:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ pubzone }}"
        state: present
        cidr: "{{ pubsubnet_cidr_block }}"
        map_public: yes
        resource_tags:
          Name: "{{ pubsubnet_name }}"
      register: pubsubnet_result

    # Private-subnet creation
    - name: Create VPC Private Subnet
      ec2_vpc_subnet:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ pvtzone }}"
        state: present
        cidr: "{{ pvtsubnet_cidr_block }}"
        map_public: no
        resource_tags:
          Name: "{{ pvtsubnet_name }}"
      register: pvtsubnet_result

    # Public-Route table
    - name: Create VPC Public Route Table
      ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ pubroute_table_name }}"
        subnets:
          - "{{ pubsubnet_result.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_result.gateway_id }}"
      register: public_route_table

    # Private-Route table
    - name: Create VPC Private Route Table
      ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ pvtroute_table_name }}"
        subnets:
          - "{{ pvtsubnet_result.subnet.id }}"
      register: private_route_table

    # Security-group
    - name: Create VPC Security Group
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        name: "{{ security_group_name }}"
        description: allow
        tags:
          Name: vivek-sg
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic
      register: security_group_results

    # Launch configuration
    - name: Create Launch Configuration
      ec2_lc:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: my-launch-config
        image_id: "{{ image_id }}"
        instance_type: "{{ type }}"
        region: "{{ region }}"
        key_name: "ireland"
        security_groups:
          - "{{ security_group_name }}"
        instance_monitoring: yes

    # Auto Scaling Group
    - name: Create Auto Scaling Group
      ec2_asg:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        name: my-auto-scaling-group
        launch_config_name: my-launch-config
        min_size: 1
        max_size: 3
        desired_capacity: 2
        vpc_zone_identifier: "{{ pubsubnet_result.subnet.id }}"
        tags:
          - key: Name
            value: my-instance

    # Create ELB
    - name: Create Elastic Load Balancer
      ec2_elb_lb:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: my-elb
        region: "{{ region }}"
        state: present
        subnets:
          - "{{ pubsubnet_result.subnet.id }}"
        security_group_ids:
          - "{{ security_group_results.group_id }}"
        listeners:
          - protocol: HTTP
            load_balancer_port: 80
            instance_protocol: HTTP
            instance_port: 80
        tags:
          Name: my-elb
